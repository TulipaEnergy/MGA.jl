var documenterSearchIndex = {"docs":
[{"location":"contributing/#Contributing-guidelines","page":"Contributing","title":"Contributing guidelines","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"First of all, thanks for the interest!","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Be polite and respectful.","category":"page"},{"location":"contributing/#Bug-reports-and-discussions","page":"Contributing","title":"Bug reports and discussions","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"contributing/#Working-on-an-issue","page":"Contributing","title":"Working on an issue","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"TipFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"developer/#Developer-documentation","page":"Dev setup","title":"Developer documentation","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"developer/#Linting-and-formatting","page":"Dev setup","title":"Linting and formatting","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"pre-commit install","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"pre-commit run -a","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"developer/#First-time-clone","page":"Dev setup","title":"First time clone","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add orgremote https://github.com/TulipaEnergy/NearOptimalAlternatives.jl","category":"page"},{"location":"developer/#Working-on-a-new-issue","page":"Dev setup","title":"Working on a new issue","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Fetch from the JSO remote and fast-forward your local main\ngit fetch orgremote\ngit switch main\ngit merge --ff-only orgremote/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"developer/#Branch-naming","page":"Dev setup","title":"Branch naming","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"developer/#Commit-message","page":"Dev setup","title":"Commit message","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nIf necessary, add a body with details.","category":"page"},{"location":"developer/#Before-creating-a-pull-request","page":"Dev setup","title":"Before creating a pull request","text":"","category":"section"},{"location":"developer/","page":"Dev setup","title":"Dev setup","text":"[Advanced] Try to create \"atomic git commits\" (recommended reading: The Utopic Git History).\nMake sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\nbash  git fetch orgremote  git rebase orgremote/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [NearOptimalAlternatives]","category":"page"},{"location":"reference/#NearOptimalAlternatives.AlternativeSolutions","page":"Reference","title":"NearOptimalAlternatives.AlternativeSolutions","text":"Structure holding the solutions for the near-optimal alternatives.\n\n\n\n\n\n","category":"type"},{"location":"reference/#NearOptimalAlternatives.MetaheuristicProblem","page":"Reference","title":"NearOptimalAlternatives.MetaheuristicProblem","text":"Structure representing a problem that can be solved by Metaheuristics.jl and the algorithm to solve it.\n\n\n\n\n\n","category":"type"},{"location":"reference/#NearOptimalAlternatives.add_solution!-Tuple{JuMP.Model, Distances.SemiMetric}","page":"Reference","title":"NearOptimalAlternatives.add_solution!","text":"add_solution!(\n    model::JuMP.Model,\n    metric::Distances.Metric\n)\n\nAdd a previously found solution to a modelling-for-generating-alternatives problem. Used for iteratively finding multiple alternative solutions.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.add_solution!-Tuple{NearOptimalAlternatives.MetaheuristicProblem, Metaheuristics.State, Distances.SemiMetric}","page":"Reference","title":"NearOptimalAlternatives.add_solution!","text":"add_solution!(\n    problem::MetaheuristicProblem,\n    result::Metaheuristics.State,\n    metric::Distances.SemiMetric\n)\n\nModify a Metaheuristic problem representing the alternative generating problem for the original LP using a newly found alternative solution. This function can be used when one wants to iteratively run a metaheuristic to find alternative solutions one by one.\n\nArguments:\n\nproblem::MetaheuristicProblem: problem to be modified by adding a solution.\nresult::Metaheuristics.State: result containing the optimal solution to add to the objective function.\nmetric::Distances.SemiMetric: metric used to evaluate distance between alternatives.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.create_alternative_generating_problem!-Tuple{JuMP.Model, Float64, Distances.SemiMetric, Vector{JuMP.VariableRef}}","page":"Reference","title":"NearOptimalAlternatives.create_alternative_generating_problem!","text":"create_alternative_problem(\n    model::JuMP.Model,\n    optimality_gap::Float64,\n    metric::Distances.Metric,\n    [selected_variables::Vector{VariableRef}]\n)\n\nTransform a JuMP model into a model solving its corresponding modelling-for-generating-alternatives problem.\n\nArguments\n\nmodel::JuMP.Model: a solved JuMP model for which alternatives are generated.\noptimality_gap::Float64: the maximum percentage deviation (>= 0) an alternative may have compared to the optimal solution.\nmetric::Distances.Metric=SqEuclidean(): the metric used to maximise the difference between alternatives and the optimal solution.\nfixed_variables::Vector{VariableRef}=[]: a subset of all variables of model that are not allowed to be changed when seeking for alternatives.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.create_alternative_generating_problem-Tuple{JuMP.Model, Metaheuristics.Algorithm, OrderedCollections.OrderedDict{JuMP.VariableRef, Float64}, Float64, Distances.SemiMetric, Dict{MathOptInterface.VariableIndex, Float64}}","page":"Reference","title":"NearOptimalAlternatives.create_alternative_generating_problem","text":"problem = create_alternative_generating_problem(\n    model::JuMP.Model,\n    algorithm::Metaheuristics.Algorithm,\n    initial_solution::OrderedDict{VariableRef, Float64},\n    optimality_gap::Float64,\n    metric::Distances.SemiMetric,\n    fixed_variables::Dict{VariableRef, Float64}\n)\n\nCreate the Metaheuristic problem representing the alternative generating problem for the original LP.\n\nArguments:\n\nmodel::JuMP.Model: JuMP model representing the original LP.\nalgorithm::Metaheuristics.Algorithm: Metaheuristic algorithm to solve the alternative generating problem.\ninitial_solution::OrderedDict{VariableRef, Float64}: (near-)optimal solution to model, for which alternatives are sought.\noptimality_gap::Float64: maximum gap in objective value between initial_solution and alternative solutions.\nmetric::Distances.SemiMetric: distance metric used to compute distance between alternative solutions and initial_solution.\nfixed_variables::Dict{MOI.VariableIndex, Float64}: solution values for fixed variables of the original problem.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.create_objective-Tuple{JuMP.Model, OrderedCollections.OrderedDict{JuMP.VariableRef, Float64}, Float64, Distances.SemiMetric, Dict{Int64, Int64}, Dict{MathOptInterface.VariableIndex, Float64}}","page":"Reference","title":"NearOptimalAlternatives.create_objective","text":"objective = create_objective(\n    model::JuMP.Model,\n    solution::OrderedDict{JuMP.VariableRef, Float64},\n    optimality_gap::Float64,\n    metric::Distances.SemiMetric,\n    index_map::Dict{Int64, Int64},\n    fixed_variables::Dict{VariableRef, Float64}\n)\n\nCreate an objective function supported by Metaheuristics.jl for the alternative generating problem.\n\nArguments\n\nmodel::JuMP.Model: solved JuMP model of the original lp problem.\nsolution::OrderedDict{JuMP.VariableRef, Float64}: solution value of the original lp problem excluding fixed variables.\noptimality_gap::Float64: maximum difference between objective value of optimal solution and alternative solutions.\nmetric::Distances.SemiMetric: distance metric used to measure distance between solutions.\nindex_map::Dict{Int64, Int64}: dictionary mapping indices in the JuMP/MathOptInterface model to indices of x.\nfixed_variables::Dict{VariableRef, Float64}: dictionary containing the values of the fixed variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.extract_bounds-Tuple{JuMP.Model, Dict{Int64, Int64}}","page":"Reference","title":"NearOptimalAlternatives.extract_bounds","text":"bounds = extract_bounds(\n    model::JuMP.Model,\n    index_map::Dict{Int64, Int64}\n)\n\nTransform the bounds from a JuMP Model into a matrix of bounds readable by Metaheuristics.jl.\n\nArguments\n\nmodel::JuMP.Model: solved JuMP model of the original lp problem.\nindex_map::Dict{Int64, Int64}: dictionary mapping indices in the JuMP/MathOptInterface model to indices of x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.extract_constraint-Tuple{MathOptInterface.ScalarAffineFunction, Vector{Float64}, Dict{Int64, Int64}, Dict{MathOptInterface.VariableIndex, Float64}}","page":"Reference","title":"NearOptimalAlternatives.extract_constraint","text":"constraint = extract_constraint(\n    constraint::MOI.ConstraintFunction,\n    x::Vector{Float64},\n    index_map::Dict{Int64, Int64},\n    fixed_variables::Dict{MOI.VariableIndex, Float64}\n)\n\nConvert a constraint from a MathOptInterface function into a julia function of x. Supports only ScalarAffineFunction and VariableIndex constraints.\n\nArguments\n\nconstraint::MOI.ConstraintFunction: constraint transform into a julia function.\nx::Vector{Float64}: a vector representing an individual in the metaheuristic population.\nindex_map::Dict{Int64, Int64}: a dictionary mapping indices in the MathOptInterface model to indices of x.\nfixed_variables::Dict{MOI.VariableIndex, Float64}: a dictionary containing the values of the fixed variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.extract_objective-Tuple{JuMP.AffExpr, Vector{Float64}, Dict{Int64, Int64}, Dict{MathOptInterface.VariableIndex, Float64}}","page":"Reference","title":"NearOptimalAlternatives.extract_objective","text":"objective = extract_objective(\n    objective::JuMP.AffExpr,\n    x::Vector{Float64},\n    index_map::Dict{Int64, Int64},\n    fixed_variables::Dict{MOI.VariableIndex, Float64}\n)\n\nConvert the objective from a MathOptInterface function into a julia function of x. Supports only linear single-objective functions.\n\nArguments\n\nobjective::JuMP.AffExpr: the objective function to transform into a julia function.\nx::Vector{Float64}: a vector representing an individual in the metaheuristic population.\nindex_map::Dict{Int64, Int64}: a dictionary mapping indices in the MathOptInterface model to indices of x.\nfixed_variables::Dict{MOI.VariableIndex, Float64}: a dictionary containing the values of the fixed variables.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.extract_variables-Tuple{JuMP.Model}","page":"Reference","title":"NearOptimalAlternatives.extract_variables","text":"extract_variables(model::JuMP.Model)\n\nRetrieve the variables and their solution values from a JuMP model.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.generate_alternatives!-Tuple{JuMP.Model, Float64, Int64}","page":"Reference","title":"NearOptimalAlternatives.generate_alternatives!","text":"result = generate_alternatives!(\n  model::JuMP.Model,\n  optimality_gap::Float64,\n  n_alternatives::Int64;\n  metric::Distances.Metric = SqEuclidean(),\n  selected_variables::Vector{VariableRef} = []\n)\n\nGenerate n_alternatives solutions to model which are as distant from the optimum and each other, but with a maximum optimality_gap, using optimisation.\n\nArguments\n\nmodel::JuMP.Model: a solved JuMP model for which alternatives are generated.\noptimality_gap::Float64: the maximum percentage deviation (>=0) an alternative may have compared to the optimal solution.\nn_alternatives: the number of alternative solutions sought.\nmetric::Distances.Metric=SqEuclidean(): the metric used to maximise the difference between alternatives and the optimal solution.\nfixed_variables::Vector{VariableRef}=[]: a subset of all variables of model that are not allowed to be changed when seeking for alternatives.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.generate_alternatives-Tuple{JuMP.Model, Float64, Int64, Metaheuristics.Algorithm}","page":"Reference","title":"NearOptimalAlternatives.generate_alternatives","text":"result = generate_alternatives(\n  model::JuMP.Model,\n  optimality_gap::Float64,\n  n_alternatives::Int64,\n  metaheuristic_algorithm::Metaheuristics.Algorithm;\n  metric::Distances.Metric = SqEuclidean(),\n  selected_variables::Vector{VariableRef} = []\n)\n\nGenerate n_alternatives solutions to model which are as distant from the optimum and each other, but with a maximum optimality_gap, using a metaheuristic algorithm.\n\nArguments\n\nmodel::JuMP.Model: a solved JuMP model for which alternatives are generated.\noptimality_gap::Float64: the maximum percentage deviation (>=0) an alternative may have compared to the optimal solution.\nn_alternatives: the number of alternative solutions sought.\nmetaheuristic_algorithm::Metaheuristics.Algorithm: algorithm used to search for alternative solutions.\nmetric::Distances.Metric=SqEuclidean(): the metric used to maximise the difference between alternatives and the optimal solution.\nfixed_variables::Vector{VariableRef}=[]: a subset of all variables of model that are not allowed to be changed when seeking for alternatives.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.run_alternative_generating_problem!-Tuple{NearOptimalAlternatives.MetaheuristicProblem}","page":"Reference","title":"NearOptimalAlternatives.run_alternative_generating_problem!","text":"result = run_alternative_generating_problem!(\n    problem::MetaheuristicProblem\n)\n\nOptimise the problem using the specified metaheuristic algorithm and return the result.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.update_solutions!-Tuple{NearOptimalAlternatives.AlternativeSolutions, JuMP.Model}","page":"Reference","title":"NearOptimalAlternatives.update_solutions!","text":"update_solutions!(results::AlternativeSolutions, model::JuMP.Model)\n\nUpdate the set of results AlternativeSolutions with the variable values obtained when solving the JuMP model model.\n\n\n\n\n\n","category":"method"},{"location":"reference/#NearOptimalAlternatives.update_solutions!-Tuple{NearOptimalAlternatives.AlternativeSolutions, Metaheuristics.State, OrderedCollections.OrderedDict{JuMP.VariableRef, Float64}, Dict{MathOptInterface.VariableIndex, Float64}, JuMP.Model}","page":"Reference","title":"NearOptimalAlternatives.update_solutions!","text":"update_solutions!(results::AlternativeSolutions, model::JuMP.Model)\n\nUpdate the set of results AlternativeSolutions with the variable values obtained when solving using Metaheuristics.\n\nArguments\n\nresults::AlternativeSolutions: set of solutions to add a new solution to.\nstate::Metaheuristics.State: contains results to metaheuristic solve.\ninitial:solution::OrderedDict{VariableRef, Float64}: used to identify the indices of the metaheuristic solution in the JuMP model.\nfixed_variables::Dict{MOI.VariableIndex, Float64}: set of fixed variables and their solution values.\nmodel::JuMP.Model: original model for which alternative solutions are found.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = NearOptimalAlternatives","category":"page"},{"location":"#NearOptimalAlternatives","page":"Home","title":"NearOptimalAlternatives","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NearOptimalAlternatives.","category":"page"}]
}
